create table if not exists films (
  id bigint generated by default as identity primary key,
  name varchar not null,
  description varchar(200),
  release_date date not null,
  duration bigint,
  mpa_rating bigint
);

create table if not exists film_genre (
  film_id bigint,
  genre_id bigint,
  primary key (film_id, genre_id)
);

create table if not exists genres (
  id bigint generated by default as identity primary key,
  name varchar not null
);

create table if not exists mpa_rating (
  id bigint generated by default as identity primary key,
  name varchar not null
);

create table if not exists likes_rating (
  film_id bigint,
  user_id bigint
);

create table if not exists users (
  id bigint generated by default as identity primary key,
  login varchar unique not null,
  email varchar unique not null,
  name varchar,
  birthday date not null
);

create table if not exists friends (
  user_id bigint,
  friend_id bigint,
  status varchar default 'REQUESTED'
);

CREATE UNIQUE INDEX if not exists film_genre_index ON film_genre (film_id, genre_id);

CREATE UNIQUE INDEX if not exists likes_rating_index ON likes_rating (film_id, user_id);

CREATE UNIQUE INDEX if not exists friends_index ON friends (user_id, friend_id);

alter table films add foreign key (mpa_rating) references mpa_rating (id);

alter table film_genre add foreign key (film_id) references films (id);

alter table film_genre add foreign key (genre_id) references genres (id);

alter table likes_rating add foreign key (user_id) references users (id);

alter table likes_rating add foreign key (film_id) references films (id);

alter table friends add foreign key (user_id) references users (id);

alter table friends add foreign key (friend_id) references users (id);

comment on table films is 'stores film data';

comment on column films.release_date is 'need use check constraint after 1895-12-12';

comment on column films.duration is 'need use check constraint > 0';

comment on table genres is 'stores genre for films';

comment on table mpa_rating is 'stores mpa rating for films';

comment on column mpa_rating.name is 'it possible use enum type';

comment on table likes_rating is 'stores film likes';

comment on table users is 'stores user data';

comment on column users.login is 'not blank';

comment on column users.email is 'email pattern';

comment on column users.birthday is 'need use check constraint';

comment on table friends is 'stores friends links for users';